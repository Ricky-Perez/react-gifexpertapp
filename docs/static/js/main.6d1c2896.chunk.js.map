{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGRC,mBAAS,IAHD,mBAGrCC,EAHqC,KAGzBC,EAHyB,KAsB5C,OAEI,aADA,CACA,QAAMC,SAfW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC/BR,GAAc,SAAAK,GAAC,OAAIH,GAAJ,mBAAmBG,OAKlCF,EAAc,MAMd,SACI,uBACIM,KAAK,OACLC,MAAOR,EACPS,SAvBc,SAACN,GACvBF,EAAcE,EAAEO,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,8DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,2CAAf,UACG,qBAAKC,IAAMf,EAAMgB,IAAKN,IACtB,kCAAMA,EAAN,WCHEO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAa,IAAD,EAEZb,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAZAC,qBAAW,WAEPxB,EAASC,GAAWwB,MAAM,SAAAhB,GAElBc,EAAS,CACLf,KAAMC,EACNY,SAAS,SAItB,CAAEpB,IAEEqB,EDhB0BI,CAAczB,GAAlCa,EAJwB,EAI7BN,KAAaa,EAJgB,EAIhBA,QAarB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAE/CoB,GAAW,mBAAGJ,UAAU,wCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAEKH,EAAOJ,KAAK,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEYA,GADCA,EAAIC,aEzB5Be,EAAe,WAAO,IAAD,EAEMvC,mBAAS,CAAC,cAFhB,mBAEvBwC,EAFuB,KAEXzC,EAFW,KAK9B,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAM5B,uBAEA,6BAGQyC,EAAWlB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCpBzB4B,IAASC,OACP,cAAE,EAAF,IACAC,SAASC,eAAe,W","file":"static/js/main.6d1c2896.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategorias}) => { //recibo lo que envíe desde GifExpertApp \r\n    //como una props. A ese porps lo desestruturo y dejo lo que necesito: setCategorias.\r\n    \r\n    const [inputValue, setinputValue] = useState(''); //'' porque sino inpuVaue me arroja undefine\r\n\r\n    const handleInputChange = (e)=>{ //toma lo que está en el input\r\n        setinputValue(e.target.value); //se actualiza el value\r\n    }\r\n\r\n    const handleSubmit = (e)=>{ \r\n        e.preventDefault();//no permite que se refresque\r\n\r\n        if( inputValue.trim().length > 2){\r\n        setCategorias(e =>[inputValue, ...e]); //agrega un valor al array, en este caso, el de las categorias\r\n    //y como el array es lo que se imprime: se imprime tb el valor que acabo de agregar\r\n    //podría poner ([...e, inputValue]), pero no tengo acceso al array categories. Podría entonces\r\n    //importarlo como a setCatyegorias, pero no es necesario si ocupo (e=>[...e,inputValue]) porque\r\n    //ese e=> ya dice que conservamos el valor que hasta entonces existe.\r\n        setinputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        //onSubmit es lo que se envía (solo el valor pero aún no hemos hecho nada con él)\r\n        <form onSubmit={handleSubmit}> \r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange } //permite el cambio del texto en el input\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired,\r\n}\r\n\r\n\r\n","\r\n\r\nexport const getGifs = async( category )=>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=6&api_key=xC291kzVibJ7PPIxyNIHByB2INdsDCQ2`;\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInUp\">\r\n           <img src={ url } alt={title} />\r\n           <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n \r\n\r\n    // useEffect( ()=> {//lo usamos para que no se ejecute de nuevo todo el código\r\n    //                 // siempre que react necesite renderizar algo\r\n    //     getGifs( category )\r\n    //         .then( gifs => setImages( gifs ) );\r\n    // }, [ category ]) //el category aquí es por si cambiara en servidor, y entonces \r\n    // //lo ejecuta de nuevo, sino el useEffect no permitiría que corra de nuevo\r\n    //ME LO LLEVÉ PARA EL HOOK DE USEFETCHGIFS\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3> \r\n\r\n                {loading && <p className=\"card animate__animated animate__flash\">Loading...</p>}\r\n\r\n                <div className=\"card-grid\">\r\n            \r\n                    {images.map( img => (\r\n                        <GifGridItem \r\n                                key={img.id}\r\n                                {...img }\r\n                        />\r\n                    ))}\r\n            \r\n                </div>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category )=>{\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n\r\n    });\r\n\r\n    useEffect( ()=>{\r\n\r\n        getGifs( category ).then( gifs => {\r\n                \r\n                setState({\r\n                    data: gifs,\r\n                    loading: false       \r\n                })\r\n        });\r\n\r\n    }, [ category ]);\r\n\r\n    return state;\r\n\r\n}","import React, {useState} from 'react';\r\nimport {AddCategory} from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n// const categorias = ['One Punch', 'Samurai X', 'Dragon Ball']\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categorias, setCategorias] = useState(['One Punch']);\r\n\r\n\r\n    return (\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategorias={setCategorias} //así RELACIONO lo del padre GifExpertApp\r\n        //entonces lo puedo ocupar y modificar en AddCategory para luego imprimirlo aquí\r\n        //Además, en la pestaña de componentes del navegador tienen que estar los\r\n        //dos componentes: GifExpertApp y AddCategory\r\n        />\r\n\r\n        <hr />\r\n        {/* <button onClick={handleAdd}>Agregar</button> */}\r\n        <ol>\r\n            {\r\n                \r\n                categorias.map( category =>(\r\n                    <GifGrid \r\n                    key={category}\r\n                    category={category} />\r\n                ))\r\n     \r\n            }\r\n        </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  < GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}